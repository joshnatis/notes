%PDF-1.3
%‚„œ”
2 0 obj
<<
/Length 3705
>>
stream
BT
/TT2 1 Tf
10 0 0 10 72 708 Tm
0.1 0.5 0.2 rg
/GS1 gs
0 Tc
0 Tw
[(CS260, Computer Ar)18(chitectur)18(e)-250(I)0(I)]TJ
/TT4 1 Tf
12 0 0 12 263.172 657 Tm
0 0 0 rg
(Lecture 8)Tj
/TT2 1 Tf
10 0 0 10 97 617.4 Tm
0.1371 Tw
(On logical operations -- bitwise shifts, bitwise AND/OR/XOR, and how to execute)Tj
0 -1.2 TD
0 Tw
(them in MIPS and C,C++)Tj
/TT4 1 Tf
0.1 0.5 0.2 rg
-2.5 -2.4 TD
(Bitwise Shifts)Tj
/TT2 1 Tf
0 g
0 -1.92 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(Logical left shift)Tj
/TT6 1 Tf
0 -2.4 TD
(0000 1010)Tj
/TT8 1 Tf
5.6509 0 TD
(--> shift left by 1 -->)Tj
/TT6 1 Tf
8.5625 0 TD
(0001 0100)Tj
/TT2 1 Tf
0 g
-14.2134 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(Leftmost bit is lost, rightmost bit )Tj
/TT9 1 Tf
14.6494 0 TD
(ﬁ)Tj
/TT2 1 Tf
0.605 0 TD
(lled with 0)Tj
0 g
-17.7544 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(It turns out, shifting left by 1 bit is equivalent to multiplying by 2)Tj
/TT8 1 Tf
0 -2.4 TD
0.0312 Tw
[(T)111(o)111( )-110.9(make sense of this, think about it in the decimal number system. Say we have 0123, and we)]TJ
0 -1.2 TD
0.0728 Tw
(shift it left by 1 bit -- now we have 1230, which is the original number multiplied by 10 \(the)Tj
T*
0 Tw
(base of the system\))Tj
/TT2 1 Tf
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(The pattern continues, if we shift left by 2 bits, we ar)18(e)-250(e)0(f)18(fectively multiplying by 4 \(2)]TJ
7 0 0 7 493.2704 447.5 Tm
(2)Tj
10 0 0 10 496.7704 443.4 Tm
(\))Tj
0 g
-42.477 -2.76 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(Logical right shift)Tj
/TT6 1 Tf
0 -2.4 TD
(0000 1010)Tj
/TT8 1 Tf
5.6509 0 TD
(--> shift right by 1 -->)Tj
/TT6 1 Tf
9.2847 0 TD
(0000 0101)Tj
/TT2 1 Tf
0 g
-14.9355 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(Rightmost bit is lost, leftmost bit )Tj
/TT9 1 Tf
14.6025 0 TD
(ﬁ)Tj
/TT2 1 Tf
0.605 0 TD
(lled with 0)Tj
0 g
-17.7075 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(It turns out, shifting right by 1 bit is equivalent to dividing by 2)Tj
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(Similarly)111(,)-250(i)0(f)-250(w)0(e)-250(shift right by 2 bits, weíd be dividing by 4, and so on)]TJ
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(Note that the r)18(emainder is discar)18(ded when dividing this way)]TJ
0 g
-5 -2.76 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
0.0104 Tw
(Shifting can easily over)Tj
/TT9 1 Tf
10.3193 0 TD
0 Tw
(ﬂ)Tj
/TT2 1 Tf
0.6079 0 TD
0.0105 Tw
[(ow)92(,)-260.4(i)0(f)-260.4(a)-260.4( )260.4(number alr)18(eady bar)18(ely )]TJ
/TT9 1 Tf
13.7903 0 TD
0 Tw
(ﬁ)Tj
/TT2 1 Tf
0.605 0 TD
0.0105 Tw
[(ts in the r)18(egister)74(,)-260.5(shifting will push)]TJ
-25.3224 -1.2 TD
0 Tw
(signi)Tj
/TT9 1 Tf
2.144 0 TD
(ﬁ)Tj
/TT2 1 Tf
0.605 0 TD
[(cant digits out of the r)18(egister)74(.)]TJ
/TT4 1 Tf
-5.249 -2.76 TD
(Bitwise Shift Instructions in MIPS)Tj
/TT2 1 Tf
0 g
0 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(The bitwise shifts ar)18(e)-250(R-type instr)8(uctions)]TJ
/TT6 1 Tf
-0.7 -1.56 TD
3 Tc
(655556)Tj
ET
0 0 0 RG
1 J 1 j 0.4 w 10 M []0 d
1 i 
72.03 220.47 m
311.31 220.47 l
S
BT
/TT2 1 Tf
10 0 0 10 77 211 Tm
0 Tc
1.5 Tw
[(opcode rs)-2500(rt )-750(r)18(d)-2500(shamt )250(function)]TJ
ET
72.03 206.55 m
311.31 206.55 l
311.31 220.47 l
72.03 206.55 m
72.03 220.47 l
261.75 206.55 m
261.75 220.47 l
219.51 206.55 m
219.51 220.47 l
184.71 206.55 m
184.71 220.47 l
152.43 206.55 m
152.43 220.47 l
116.79 206.55 m
116.79 220.47 l
S
BT
/TT8 1 Tf
10 0 0 10 72 193 Tm
0 Tw
[(Finally)37(,)-250(weíll use the shamt!)]TJ
/TT6 1 Tf
0 -2.4 TD
(SLL rd, rt, shamt)Tj
/TT2 1 Tf
0 g
0 -1.56 TD
(ï)Tj
/TT8 1 Tf
0 0 0 rg
2.5 0 TD
(SLL $t2, $s0, 4)Tj
/TT2 1 Tf
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(Shift $s0 left 4 bits, stor)18(e)-250(i)0(n)-250($t2)]TJ
/TT6 1 Tf
-2.5 -1.56 TD
(SRL rd, rt, shamt)Tj
/TT2 1 Tf
0 g
18.453 -9.82 TD
0.055 Tw
[(1)55(1)55( Mar)18(ch )55(2020)]TJ
ET
endstream
endobj
3 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 7 0 R
/TT9 8 0 R
>>
/ExtGState <<
/GS1 9 0 R
>>
>>
endobj
12 0 obj
<<
/Length 3170
>>
stream
BT
/TT2 1 Tf
10 0 0 10 282.17 744 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-2-)Tj
/TT4 1 Tf
0 0 0 rg
-21.017 -3.6 TD
(Bitwise Shift Instructions in C)Tj
/TT6 1 Tf
0 -2.4 TD
(int a = 1;)Tj
T*
0.6 Tc
[(a=a<)600(<1)600(;)]TJ
7.2007 0 TD
0 Tc
(//left shift by 1, multiply by 2)Tj
-7.2007 -2.4 TD
0.6 Tc
[(a=a>)600(>2)600(;)]TJ
7.2007 0 TD
0 Tc
(//right shift by 2, divide by 4)Tj
/TT4 1 Tf
0.1 0.5 0.2 rg
-7.2007 -3.6 TD
(Bitwise AND/OR/XOR)Tj
/TT8 1 Tf
0 0 0 rg
0 -2.4 TD
(Le truth table)Tj
ET
0 0 0 RG
1 J 1 j 0.4 w 10 M []0 d
1 i 
72.03 565.47 m
224.79 565.47 l
S
BT
/TT4 1 Tf
10 0 0 10 77 556 Tm
1.5 Tw
[(x)-1750(y)-1750(AND OR XOR)]TJ
ET
72.03 551.55 m
224.79 551.55 l
S
BT
10 0 0 10 77 542 Tm
1.778 Tc
-1.056 Tw
[(00 0)-1471.5(0)-1360.5(0)]TJ
ET
72.03 537.51 m
224.79 537.51 l
S
BT
10 0 0 10 77 528 Tm
[(01 0)-1471.5(1)-1360.5(1)]TJ
ET
72.03 523.47 m
224.79 523.47 l
S
BT
10 0 0 10 77 514 Tm
[(10 0)-1471.5(1)-1360.5(1)]TJ
ET
72.03 509.55 m
224.79 509.55 l
S
BT
10 0 0 10 77 500 Tm
[(11 1)-1471.5(1)-1360.5(0)]TJ
ET
72.03 495.51 m
224.79 495.51 l
224.79 565.47 l
72.03 495.51 m
72.03 565.47 l
187.59 495.51 m
187.59 565.47 l
154.47 495.51 m
154.47 565.47 l
112.59 495.51 m
112.59 565.47 l
89.55 495.51 m
89.55 565.47 l
S
BT
/TT2 1 Tf
10 0 0 10 72 466.4 Tm
0 g
0 Tc
0 Tw
(ï)Tj
0 0 0 rg
2.5 0 TD
0.1994 Tw
[(As assembly instr)8(uctions, each of these perform their bitwise operation on every corr)18(e-)]TJ
0 -1.2 TD
0 Tw
(sponding pair of bits of the two binary bit strings being operated on)Tj
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(The bitwise AND/OR/XOR instr)8(uctions ar)18(e)-250(R-type instr)8(uctions)]TJ
0 g
-2.5 -2.76 TD
(ï)Tj
/TT8 1 Tf
0 0 0 rg
2.5 0 TD
(AND $t0, $s0, $s1 \(t0 = s0 & t0\))Tj
0 -2.4 TD
(OR $t0, $s0, $s1)Tj
T*
(XOR $t0, $s0, $s1)Tj
/TT4 1 Tf
0.1 0.5 0.2 rg
-2.5 -3.6 TD
(Masking)Tj
/TT2 1 Tf
0 g
0 -2.76 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(A)-250(common use of the)]TJ
/TT8 1 Tf
9.6831 0 TD
(AND)Tj
/TT2 1 Tf
2.5278 0 TD
[(instr)8(uction is for)]TJ
/TT4 1 Tf
7.5408 0 TD
(masking)Tj
/TT2 1 Tf
0 g
-22.2517 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(Say we wanted to extract the leftmost 6 bits of an instr)8(uction, how would we do that?)]TJ
ET
174.51 265.95 m
426.51 265.95 l
S
BT
/TT8 1 Tf
8 0 0 8 97 243 Tm
[(Letí)55(s)-250(d)0(o)-250(a)-250(small experiment )]TJ
/TT10 1 Tf
11.196 0 TD
(ﬁ)Tj
/TT8 1 Tf
0.5278 0 TD
(rst)Tj
/TT2 1 Tf
-11.7238 -3 TD
(1010 AND )Tj
4.8828 0 TD
-0.055 Tc
0.11 Tw
[(1111 -)-55(-)]TJ
3.001 0 TD
0 Tc
0 Tw
(what happens when you AND a bit with a 1?)Tj
-7.8838 -3 TD
(Result: 1010)Tj
/TT8 1 Tf
T*
0.0222 Tw
(Conclusion: ANDing a bit with a 1 does not change its state; since both bits have to be 1 in order for the operation to evaulat)Tj
50.4874 0 TD
0 Tw
(e)Tj
-50.4874 -1.5 TD
(to true, ANDing by 1 will keep 1s as 1s and 0s as 0s \(think about it\))Tj
/TT2 1 Tf
0 -3 TD
(1010 AND 0000 -- what happens when you AND a bit with a 0?)Tj
T*
(Result: 0000)Tj
/TT8 1 Tf
T*
0.0195 Tw
(Conclusion: ANDing a bit with a 0 íclearsí it \(sets it to 0\). Anything AND 0 has to be 0, cause both operands must be 1 for it)Tj
0 -1.5 TD
0 Tw
(to evaluate to true.)Tj
/TT2 1 Tf
10 0 0 10 256.53 24 Tm
0 g
0.055 Tw
[(1)55(1)55( Mar)18(ch )55(2020)]TJ
ET
endstream
endobj
13 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT4 5 0 R
/TT6 6 0 R
/TT8 7 0 R
/TT10 14 0 R
>>
/ExtGState <<
/GS1 9 0 R
>>
>>
endobj
16 0 obj
<<
/Length 3822
>>
stream
BT
/TT2 1 Tf
10 0 0 10 282.17 744 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-3-)Tj
/TT6 1 Tf
0 0 0 rg
-18.517 -3.6 TD
(unsigned int instruction; //whatís in the first 6 bits? \(opcode\))Tj
/TT2 1 Tf
0 g
-2.5 -2.76 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
(The way to do it is to make a "mask")Tj
0 g
0 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
0.0469 Tw
[(Using this discover)18(ed pr)18(operty of the bitwise AND, we can cr)18(eate a binary string for)18(-)]TJ
0 -1.2 TD
0.0686 Tw
[(matted in such a way that ANDing it with the instr)8(uction in question will yield only)]TJ
T*
0 Tw
(the bits we want)Tj
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
[(W)92(e)92( )-92(call this binary string a mask)]TJ
0 g
-2.5 -1.56 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
0.0438 Tw
[(The trick is to make the bits corr)18(esponding to positions of bits we donít car)18(e)-293.9(about be)]TJ
0 -1.2 TD
0.1671 Tw
[(0s, and for the ones we do car)18(e)-417.1(about be 1s. This way the bits we car)18(e)-417.1(about will)]TJ
T*
0 Tw
[(r)18(emain the same while the r)18(est of the binary string will be clear)18(ed.)]TJ
/TT8 1 Tf
-2.5 -2.4 TD
0.0549 Tw
(So, to get the )Tj
/TT10 1 Tf
5.6908 0 TD
0 Tw
(ﬁ)Tj
/TT8 1 Tf
0.5278 0 TD
0.0549 Tw
[(rst 6 bits, we simply cr)18(eate a mask with 1s in the )]TJ
/TT10 1 Tf
20.4281 0 TD
0 Tw
(ﬁ)Tj
/TT8 1 Tf
0.5278 0 TD
0.055 Tw
[(rst 6 bits and 0s everywher)18(e)-305(else,)]TJ
-27.1746 -1.2 TD
0 Tw
(and then use that mask)Tj
/TT12 1 Tf
0 -2.4 TD
-0.055 Tc
0.11 Tw
(1111 11)Tj
/TT8 1 Tf
3.28 0 TD
0 Tc
0 Tw
[(00 0000 0000 0000 0000 0000 0000)-500(\(r)18(emember that instructions ar)18(e)-250(3)0(2)-250(bits long\))]TJ
-3.28 -2.4 TD
0.0171 Tw
[(Ther)18(eí)55(s)-267.2(a)-267.2(p)0(r)18(oblem with this: typing out 32 digits is very labor intensive and pr)18(one to err)18(or)74(.)-267.1(Instead of)]TJ
0 -1.2 TD
0.0233 Tw
[(binary)37(,)-273.2(letí)55(s)-273.3(use hexadecimal to make our mask. Simply convert each gr)18(oup of 4 bits to a hexadecimal)]TJ
T*
0 Tw
(value.)Tj
0 -2.4 TD
(0x F C 0 0 0 0 0 0)Tj
T*
[(Our example pr)18(oblem is posed in C, not MIPS, so letí)55(s)-250(continue in C.)]TJ
T*
(unsigned int mask = 0xFC000000;)Tj
T*
(if \(instruction & mask == 0\) cout << ìOPCODE is 0ì;)Tj
T*
0.0308 Tw
[(í&í is the bitwise AND symbol, if the entir)18(e)-280.8(32-bit string has the value of 0 after being ANDed with)]TJ
0 -1.2 TD
0 Tw
[(the mask, it means the leftmost 6 bits wer)18(e)-250(all 0, so the opcode is 0)]TJ
0 -2.4 TD
(What about checking if the OPCODE is 9? That would mean the leftmost 6 bits have a value of 9 col-)Tj
0 -1.2 TD
[(lectively)37(,)-250(s)0(o)-250(like this: 0010 01...)]TJ
0 -2.4 TD
0.0471 Tw
[(ANDing our mask with the instruction, leaving only the leftmost 6 bits unclear)18(ed, should then pr)18(o-)]TJ
0 -1.2 TD
0.0374 Tw
(duce exactly)Tj
/TT12 1 Tf
5.2784 0 TD
(0010 01)Tj
/TT8 1 Tf
3.5748 0 TD
[(00 0000 0000 0000 0000 0000 0000 \(that is, if the OPCODE indeed is 9\). W)20(e)]TJ
-8.8532 -1.2 TD
0 Tw
[(simply need to check if the operation indeed pr)18(oduces this value.)]TJ
0 -2.4 TD
0.0748 Tw
[(Pr)18(oblem: we caní)37(t)-324.8(write out the entir)18(e)-324.8(binary string in the if condition:)]TJ
/TT2 1 Tf
29.6144 0 TD
[(if\(instr)8(uction & mask ==)]TJ
-29.6144 -1.2 TD
0.1742 Tw
[(00100100000000000000000000000000\) -- itís too long and also would be interpr)18(eted as an)]TJ
T*
0.0075 Tw
[(octal number cause it starts with a 0. The solution is to encode your desir)18(ed r)18(esult as a hexa-)]TJ
T*
0 Tw
[(decimal number)74(,)-250(for br)18(evity and so on.")]TJ
/TT8 1 Tf
0 -2.4 TD
[(9)-250(=)0(=)-250(0010 0100 0000 0000 0000 0000 0000 0000 == 0x 2 4 0 0 0 0 0 0)]TJ
T*
(if \(instruction & mask == 0x24000000\) cout << ìOPCODE is 9ì;)Tj
T*
[(That ends this small case study)37(,)-250(hopefully that was helpful.)]TJ
/TT2 1 Tf
0 g
15.953 -10.56 TD
0.055 Tw
[(1)55(1)55( Mar)18(ch )55(2020)]TJ
ET
endstream
endobj
17 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT6 6 0 R
/TT8 7 0 R
/TT10 14 0 R
/TT12 18 0 R
>>
/ExtGState <<
/GS1 9 0 R
>>
>>
endobj
20 0 obj
<<
/Length 1187
>>
stream
BT
/TT2 1 Tf
10 0 0 10 282.17 744 Tm
0 g
/GS1 gs
0 Tc
0 Tw
(-4-)Tj
-21.017 -3.6 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
0.028 Tw
[(W)92(e)92( )-92(know what happens when we AND a binary string with all 1s and 0s -- what happpens)]TJ
0 -1.2 TD
0 Tw
(when we OR it or XOR it in a similar manner?)Tj
/TT8 1 Tf
8 0 0 8 97 672 Tm
(1010 OR )Tj
3.9448 0 TD
-0.055 Tc
0.11 Tw
[(1111 =)-55(=)-305(1111)]TJ
-3.9448 -1.95 TD
0 Tc
0 Tw
(1010 OR 0000 == 1010)Tj
10 0 0 10 72 628.8 Tm
[(Conclusion: ORing with 1s í)55(setsí a bit \(to 1\), while ORing with a 0 pr)18(eserves a bití)55(s)-250(state \(doesní)37(t)-250(affect it\))]TJ
8 0 0 8 97 601.2 Tm
(1010 XOR )Tj
4.667 0 TD
-0.055 Tc
0.11 Tw
[(1111 =)-55(=)]TJ
3.5469 0 TD
0 Tc
0 Tw
(0101)Tj
-8.2139 -1.95 TD
(1010 XOR 0000 == 1010)Tj
10 0 0 10 72 558 Tm
[(Conclusion: XORing with 1s inverts a bit, while XORing with a 0 pr)18(eserves its value)]TJ
/TT2 1 Tf
0 g
0 -2.76 TD
(ï)Tj
0 0 0 rg
2.5 0 TD
0.0766 Tw
[(W)92(e)92( )-92.1(can use these masking tricks to manipulate certain portions of bits \(either by inverting)]TJ
0 -1.2 TD
0 Tw
(with XOR, setting with OR, or clearing with AND\))Tj
0 g
15.953 -49.44 TD
0.055 Tw
[(1)55(1)55( Mar)18(ch )55(2020)]TJ
ET
endstream
endobj
21 0 obj
<<
/ProcSet [/PDF /Text ]
/Font <<
/TT2 4 0 R
/TT8 7 0 R
>>
/ExtGState <<
/GS1 9 0 R
>>
>>
endobj
9 0 obj
<<
/Type /ExtGState
/SA false
/SM 0.02
/OP false
/op false
/OPM 1
/BG2 /Default
/UCR2 /Default
/HT /Default
/TR2 /Default
>>
endobj
22 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 692
/Descent -277
/Flags 34
/FontBBox [-166 -283 1021 927]
/FontName /Palatino-Roman
/ItalicAngle 0
/StemV 84
/XHeight 469
/StemH 84
>>
endobj
23 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 681
/Descent -277
/Flags 262178
/FontBBox [-152 -266 1000 924]
/FontName /Palatino-Bold
/ItalicAngle 0
/StemV 133
/XHeight 471
/StemH 122
>>
endobj
24 0 obj
<<
/Type /FontDescriptor
/Ascent 753
/CapHeight 562
/Descent -246
/Flags 35
/FontBBox [-28 -250 628 805]
/FontName /Courier
/ItalicAngle 0
/StemV 51
/XHeight 426
/StemH 51
>>
endobj
25 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 692
/Descent -277
/Flags 98
/FontBBox [-170 -276 1010 918]
/FontName /Palatino-Italic
/ItalicAngle -15
/StemV 84
/XHeight 482
/StemH 84
>>
endobj
26 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 692
/Descent -277
/Flags 34
/FontBBox [-166 -283 1021 927]
/FontName /Palatino-Roman
/ItalicAngle 0
/StemV 84
/XHeight 469
/StemH 84
>>
endobj
27 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 692
/Descent -277
/Flags 98
/FontBBox [-170 -276 1010 918]
/FontName /Palatino-Italic
/ItalicAngle -15
/StemV 84
/XHeight 482
/StemH 84
>>
endobj
28 0 obj
<<
/Type /FontDescriptor
/Ascent 822
/CapHeight 681
/Descent -277
/Flags 262242
/FontBBox [-170 -271 1073 926]
/FontName /Palatino-BoldItalic
/ItalicAngle -15
/StemV 133
/XHeight 469
/StemH 122
>>
endobj
4 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 149
/Widths [250 0 371 0 500 0 778 0 333 333 0 606 250 333 250 606 
500 500 500 500 500 0 500 0 0 0 250 0 0 606 0 444 
0 778 0 709 774 0 0 0 0 337 0 0 611 946 831 786 
604 0 668 525 613 778 0 1000 667 0 0 0 0 0 0 0 
0 500 553 444 611 479 333 556 582 291 0 556 291 883 582 546 
601 560 395 424 326 603 565 834 516 556 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 278 0 0 606 ]
/Encoding /WinAnsiEncoding
/BaseFont /Palatino-Roman
/FontDescriptor 22 0 R
>>
endobj
5 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 121
/Widths [250 0 0 0 0 0 0 0 0 0 0 0 0 0 0 296 
500 500 0 0 0 0 0 0 500 0 0 0 0 0 0 0 
0 778 667 722 833 0 0 0 0 389 0 0 611 1000 833 833 
611 0 722 611 0 0 0 0 667 0 0 0 0 0 0 0 
0 500 0 444 0 500 389 556 611 333 0 611 0 889 611 556 
0 0 389 444 333 611 0 833 500 556 ]
/Encoding /WinAnsiEncoding
/BaseFont /Palatino-Bold
/FontDescriptor 23 0 R
>>
endobj
6 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 146
/Widths [600 0 0 0 0 0 0 0 600 600 0 0 600 0 0 600 
600 600 600 0 600 600 600 0 0 0 0 600 600 600 600 600 
0 0 0 0 0 0 0 0 0 0 0 0 600 0 0 0 
0 0 600 600 0 0 0 0 0 0 0 0 0 0 0 0 
0 600 600 600 600 600 600 600 600 600 0 0 600 600 600 600 
600 0 600 600 600 600 600 600 0 600 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 600 ]
/Encoding /WinAnsiEncoding
/BaseFont /Courier
/FontDescriptor 24 0 R
>>
endobj
7 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 147
/Widths [250 333 0 0 500 0 778 0 333 333 0 0 250 333 250 0 
500 500 500 500 500 0 500 0 0 500 250 250 606 606 606 500 
0 722 0 667 778 611 556 0 0 333 0 0 556 944 778 778 
611 0 667 556 611 0 0 944 722 0 0 0 0 0 0 0 
0 444 463 407 500 389 278 500 500 278 0 444 278 778 556 444 
500 0 389 389 333 556 500 722 500 500 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
0 0 278 500 ]
/Encoding /WinAnsiEncoding
/BaseFont /Palatino-Italic
/FontDescriptor 25 0 R
>>
endobj
8 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 222
/LastChar 223
/Widths [605 608 ]
/Encoding /MacRomanEncoding
/BaseFont /Palatino-Roman
/FontDescriptor 26 0 R
>>
endobj
14 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 222
/LastChar 222
/Widths [528 ]
/Encoding /MacRomanEncoding
/BaseFont /Palatino-Italic
/FontDescriptor 27 0 R
>>
endobj
18 0 obj
<<
/Type /Font
/Subtype /TrueType
/FirstChar 32
/LastChar 49
/Widths [250 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
500 500 ]
/Encoding /WinAnsiEncoding
/BaseFont /Palatino-BoldItalic
/FontDescriptor 28 0 R
>>
endobj
1 0 obj
<<
/Type /Page
/Parent 10 0 R
/Resources 3 0 R
/Contents 2 0 R
>>
endobj
11 0 obj
<<
/Type /Page
/Parent 10 0 R
/Resources 13 0 R
/Contents 12 0 R
>>
endobj
15 0 obj
<<
/Type /Page
/Parent 10 0 R
/Resources 17 0 R
/Contents 16 0 R
>>
endobj
19 0 obj
<<
/Type /Page
/Parent 10 0 R
/Resources 21 0 R
/Contents 20 0 R
>>
endobj
29 0 obj
<<
/S /D
>>
endobj
30 0 obj
<<
/Nums [0 29 0 R ]
>>
endobj
10 0 obj
<<
/Type /Pages
/Kids [1 0 R 11 0 R 15 0 R 19 0 R]
/Count 4
/MediaBox [0 0 612 792]
>>
endobj
31 0 obj
<<
/CreationDate (D:20200311035627-04'00')
/ModDate (D:20200311035627-04'00')
/Producer (Apple pstopdffilter)
>>
endobj
32 0 obj
<<
/Type /Catalog
/Pages 10 0 R
/PageLabels 30 0 R
>>
endobj
xref
0 33
0000000000 65535 f 
0000016734 00000 n 
0000000016 00000 n 
0000003773 00000 n 
0000014198 00000 n 
0000014731 00000 n 
0000015155 00000 n 
0000015634 00000 n 
0000016167 00000 n 
0000012643 00000 n 
0000017135 00000 n 
0000016815 00000 n 
0000003912 00000 n 
0000007135 00000 n 
0000016344 00000 n 
0000016899 00000 n 
0000007277 00000 n 
0000011152 00000 n 
0000016519 00000 n 
0000016983 00000 n 
0000011296 00000 n 
0000012536 00000 n 
0000012783 00000 n 
0000012983 00000 n 
0000013188 00000 n 
0000013379 00000 n 
0000013582 00000 n 
0000013782 00000 n 
0000013985 00000 n 
0000017067 00000 n 
0000017095 00000 n 
0000017238 00000 n 
0000017367 00000 n 
trailer
<<
/Size 33
/Root 32 0 R
/Info 31 0 R
/ID [<733de7b9cc3e4738efeba489d93053f4><733de7b9cc3e4738efeba489d93053f4>]
>>
startxref
17437
%%EOF
